% Encoding: UTF-8

@Thesis{amslaurea19778,
  author      = {Filippo Nardini},
  title       = {Sviluppo di piattaforme per il linguaggio Protelis in Kotlin e Java},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2019},
  url         = {http://amslaurea.unibo.it/19778/},
  abstract    = {L'ambiente da cui siamo circondati tutti i giorni {\`e} pervaso da dispositivi in grado di effettuare computazioni e comunicare. L'eterogeneit{\`a} di questi dispositivi rende difficile sviluppare applicazioni distribuite resilienti e affidabili utilizzando le tecniche dell'ingegneria del software classica. La programmazione aggregata si propone come paradigma di sviluppo che fornisce meccanismi di comunicazione flessibili e robusti tra questi dispositivi, in particolare vengono presi in considerazione il field calculus e una sua implementazione pratica: Protelis, un linguaggio di programmazione che supporta tale paradigma di programmazione.
In questo lavoro vengono analizzate le caratteristiche di Protelis, in particolare la sua architettura e i suoi livelli di astrazione. In seguito vengono modellati nuovi concetti, per la realizzazione di un modello ad oggetti riusabile, che possa essere un potenziale punto di partenza per l'implementazione di un'infrastruttura facilmente estendibile, riusabile, e manutenibile. A supporto della flessibilit{\`a} del modello, sono presentate tre realizzazioni dell'architettura descritta, che eseguono lo stesso programma aggregato, ma finalizzate a descrivere tre scenari d'uso distinti: la prima rappresenta un micro-simulatore, che emula un contesto distribuito, ma sfrutta la memoria condivisa per permettere lo scambio di messaggi tra i nodi; la seconda realizza un'applicazione distribuita utilizzando le socket TCP per la comunicazione; la terza si serve di un broker di messaggistica centrale e sfrutta il protocollo MQTT, un modello di scambio di messaggi utilizzato nell'Internet-of-Things, per implementare la comunicazione. Per provare l'interoperabilit{\`a} dell'architettura con i linguaggi eseguiti sulla Java Virtual Machine, questi tre scenari sono stati implementati sia in Java che in Kotlin.},
  file        = {:amslaurea19778 - Sviluppo Di Piattaforme Per Il Linguaggio Protelis in Kotlin E Java.pdf:PDF},
  keywords    = {aggregate computing,field calculus,protelis,software engineering},
}

@Thesis{amslaurea19084,
  author      = {Diego Mazzieri},
  title       = {Progettazione e implementazione di agenti cognitivi per simulazioni di evacuazioni di folle in Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2019},
  url         = {http://amslaurea.unibo.it/19084/},
  abstract    = {Le vicende di piazza San Carlo a Torino e della discoteca ?Lanterna Azzurra? di Corinaldo sono solo degli esempi a noi vicini geograficamente e cronologicamente di come l?evacuazione di una folla possa sfociare in una tragedia se non si considerano adeguatamente: l?afflusso, i potenziali pericoli e il comportamento dei partecipanti.
La simulazione computerizzata rappresenta uno dei pi{\`u} potenti strumenti a disposizione dell?uomo per prevenire questo genere di situazioni, evitando errori che possono irrompere in una vastissima quantit{\`a} di casistiche, dall'organizzazione di un evento alla costruzione di un edificio.
Mentre notevoli sviluppi sono stati conseguiti in merito alla descrizione delle varie forze fisiche in gioco, meno esplorati sono i temi relativi alle capacit{\`a} cognitive e relazionali delle persone.
Usando la modellazione basata sugli agenti e focalizzando l?attenzione su questi aspetti, il lavoro di tesi presentato ha come obiettivo quello di inserire all'interno del simulatore stocastico Alchemist, gli elementi caratterizzanti l?evacuazione di una folla in una accezione generale, senza concentrarsi su nessuno scenario specifico, in modo da fornire gli strumenti necessari per ricreare svariate situazioni di interesse.},
  file        = {:amslaurea19084 - Progettazione E Implementazione Di Agenti Cognitivi Per Simulazioni Di Evacuazioni Di Folle in Alchemist.pdf:PDF},
  keywords    = {simulazione,modelli ad agenti,agenti cognitivi,evacuazione,folle,contagio sociale,crowd steering,dinamiche di gruppo,Alchemist,Kotlin},
}

@Thesis{amslaurea19092,
  author      = {Federico Pettinari},
  title       = {Un Framework per Simulazione e Sviluppo di Sistemi Aggregati di Smart-Camera},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2019},
  url         = {http://amslaurea.unibo.it/19092/},
  abstract    = {Le smartcam sono telecamere capaci di rilevare entit{\`a} di interesse, e sono generalmente impiegate nella sorveglianza. Con l'avanzamento della tecnologia si {\`e} creata la possibilit{\`a} di renderle mobili e dotarle di mezzi trasmissivi. Questo ha aperto grandi opportunit{\`a} per la coordinazione di reti di smartcam con lo scopo di aumentarne l'efficienza. Lo sviluppo di tali sistemi pu{\`o} beneficiare dall'impiego di specifici strumenti per la simulazione e programmazione in modo da facilitarne l'implementazione e la valutazione.
Nell'ambito di questa tesi viene adottato Alchemist, uno degli ambienti che consentono simulazioni di Collective Adaptive System. Vengono quindi illustrate e discusse la fasi di sviluppo di un nuovo modulo software volto ad estendere Alchemist con il supporto alle smartcam. Inoltre vengono riprodotti alcuni algoritmi presenti in letteratura ed implementati di nuovi con l'ausilio dell'Aggregate Programming, un paradigma per la programmazione di sistemi distribuiti. Questi algoritmi hanno lo scopo di creare un sistema adattativo di smartcam che comunicano fra di esse per coordinarsi nei movimenti, e nella decisione degli obiettivi da raggiungere. L'obiettivo {\`e} l'incremento del livello di copertura della zona alla quale sono preassegnate, ed il raggiungimento di un certo livello di ridondanza nell'osservazione di eventuali entit{\`a} di interesse. Infine viene effettuata una validazione empirica degli algoritmi attraverso la simulazione di alcuni scenari.},
  file        = {:amslaurea19092 - Un Framework Per Simulazione E Sviluppo Di Sistemi Aggregati Di Smart Camera.pdf:PDF},
  keywords    = {smartcam,protelis,alchemist,aggregate programming,cas,coordinazione,algoritmi,programmazione aggregata,linpro},
}

@Thesis{amslaurea17016,
  author      = {Manuel Peruzzi},
  title       = {Distributing Aggregate Computations on top of Akka Actors},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2018},
  url         = {http://amslaurea.unibo.it/17016/},
  abstract    = {In the context of the Internet of Things, development of large-scale, adaptive systems usually focuses on the behavior of the single device. Aggregate programming is a paradigm that provides an alternative approach, in which the basic unit of computing is a cooperating collection of devices, instead of a single device. scafi is a Scala framework for aggregate programming, and provides an Akka-based platform for aggregate applications, supporting both peer-to-peer and server-based networks. Moreover, scafi offers a simulator module for the simulation of an aggregate system. The work described in this thesis consists in the analysis of scafi, in the partial re-engineering of its internal actor platform, and in the development of new features. The main goal is to enhance the flexibility of scafi in a distributed context, promoting its adoption for programming spatial systems. First of all, communication between distributed nodes is enabled, by defining a JSON-based serialization strategy, which promotes interoperability. A hybrid platform is also introduced, exploiting a peer-to-peer communication between devices, with a central unit that manages all the relevant space related information. This platform fills the main gap of the peer to-peer approach in a distributed environment: tracking of remote devices. Moreover, a code mobility approach is implemented, allowing the assignment of new programs to devices, at runtime. Lastly, the concept of monitoring a distributed aggregate system emerged, leading to the development of a graphical user interface, observing the devices in a running system. In this thesis, I present the new architecture and API of the actor platform of scafi, designed with the aim of ensure a more flexible approach for the development of distributed applications with aggregate computing.},
  file        = {:amslaurea17016 - Distributing Aggregate Computations on Top of Akka Actors.pdf:PDF},
  keywords    = {aggregate programming,distributed systems,actors,Akka,Scala,scafi},
}

@Thesis{amslaurea16824,
  author      = {Gianluca Aguzzi},
  title       = {Sviluppo di un front-end di simulazione per applicazioni aggregate nel framework Scafi},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2018},
  url         = {http://amslaurea.unibo.it/16824/},
  abstract    = {La tesi {\`e} articolata in sei capitoli: nel primo vengono introdotti gli studi pregressi realizzati durante il periodo di tirocinio svolto presso l'Universit{\`a} di Bologna, utili a comprendere l'insieme di scelte effettuate nelle altre fasi dello studio.
Nel secondo capitolo viene descritta la fase di analisi del modello da realizzare, completa di elenco dei requisiti che il front-end deve rispettare, in questa fase in modo particolare, c'{\`e} stato uno scambio di informazioni costante con il prof. Mirko Viroli e il dott. Roberto Casadei nei panni dei 'committenti' nel progetto.
Nel terzo capitolo si descrive la fase di progettazione architetturale, fornendo informazioni su come il software realizza quanto richiesto in fase di analisi in termini di architettura. Si descrive, quindi, la struttura generale del front-end e si spiega il perch{\'e} delle varie scelte presenti in questa fase.
Nel quarto capitolo vengono descritte, invece, quelle che sono le scelte di design dettagliato, in particolare si descrive com'{\`e} possibile interfacciare il front-end con il framework {$\backslash$}class\{ScaFi\} e come avviare e descrivere una simulazione aggregata.
Nel quinto capitolo vengono mostrate le scelte implementative per la realizzazione del software e vengono mostrati alcuni screenshot con i risultati ottenuti e, infine, nel sesto si offre una panoramica di quello che {\`e} il risultato finale mostrando la struttura dell'interfaccia grafica corredato di analisi delle performance estratte da alcune delle possibili simulazioni eseguibili sul front-end},
  file        = {:amslaurea16824 - Sviluppo Di Un Front End Di Simulazione Per Applicazioni Aggregate Nel Framework Scafi.pdf:PDF},
  keywords    = {aggregate computing,scafi,scala},
}

@Thesis{amslaurea15725,
  author      = {Davide Foschi},
  title       = {Towards Aggregate Processes in a Field Calculus-Based Platform},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2018},
  url         = {http://amslaurea.unibo.it/15725/},
  abstract    = {Aggregate programming {\`e} un paradigma promettente che vuole spostare il modo di vedere i sistemi distribuiti da una visione locale dei singoli device ad una visione aggregata. Il comportamento viene definito trattando il sistema nell'insieme come una singola entit{\`a}, mentre le interazioni fra singoli diventa implicita. Tuttavia, il comportamento delle entit{\`a} in sistemi distribuiti adattivi complessi potrebbe cambiare nel tempo per via di politiche di self-organization. In questo scenario, si creano dei gruppi dinamici di entit{\`a} con l'obiettivo di raggiungere determinati risultati. Un processo aggregato identifica un insieme di azioni che ogni entit{\`a} di un gruppo deve eseguire.

Il lavoro svolto in questa tesi discute nel dettaglio il concetto di Aggregate process applicato ad aggregate computing. Un framework basato su aggregate programming e field calculus, chiamato scafi, {\`e} utilizzato per fornire una implementazione per Aggregate processes. Come prova di concetto, vengono presentate delle librerie che implementano modelli di coordinazione recenti. In particolare, i modelli in questione sono Spatial tuples, un modello basato sullo spazio di tuple in cui le tuple hanno una posizione fisica nello spazio, e Replicated gossip, una versione migliorata dei classici protocolli di gossip in cui sono utilizzate delle replicazioni basate sul tempo.},
  file        = {:amslaurea15725 - Towards Aggregate Processes in a Field Calculus Based Platform.pdf:PDF},
  keywords    = {distributed,systems,field,calculus,aggregate, programming,scafi,aggregate,processes,coordination,models},
}

@Thesis{amslaurea15716,
  author      = {Cristian Paolucci},
  title       = {Prototyping a scalable Aggregate Computing cluster with open-source solutions},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2018},
  url         = {http://amslaurea.unibo.it/15716/},
  abstract    = {L'Internet of Things {\`e} un concetto che {\`e} stato ora adottato in modo pervasivo per descrivere un vasto insieme di dispositivi connessi attraverso Internet. Comunemente, i sistemi IoT vengono creati con un approccio bottom-up e si concentrano principalmente sul singolo dispositivo, il quale {\`e} visto come la basilare unit{\`a} programmabile. Da questo metodo pu{\`o} emergere un comportamento comune trovato in molti sistemi esistenti che deriva dall'interazione di singoli dispositivi. Tuttavia, questo crea un'applicazione distribuita spesso dove i componenti sono strettamente legati tra di loro. Quando tali applicazioni crescono in complessit{\`a}, tendono a soffrire di problemi di progettazione, mancanza di modularit{\`a} e riusabilit{\`a}, difficolt{\`a} di implementazione e problemi di test e manutenzione.
L'Aggregate Programming fornisce un approccio top-down a questi sistemi, in cui l'unit{\`a} di calcolo di base {\`e} un'aggregazione anzich{\'e} un singolo dispositivo.

Questa tesi consiste nella progettazione e nella distribuzione di una piattaforma, basata su tecnologie open-source, per supportare l'Aggregate Computing nel cloud, in cui i dispositivi saranno in grado di scegliere dinamicamente se il calcolo si trova su se stessi o nel cloud. Anche se Aggregate Computing {\`e} intrinsecamente progettato per un calcolo distribuito, il Cloud Computing introduce un'alternativa scalabile, affidabile e altamente disponibile come strategia di esecuzione. Quest'opera descrive come sfruttare una Reactive Platform per creare un'applicazione scalabile nel cloud.
Dopo che la struttura, l'interazione e il comportamento dell'applicazione sono stati progettati, viene descritto come la distribuzione dei suoi componenti viene effettuata attraverso un approccio di containerizzazione con Kubernetes come orchestratore per gestire lo stato desiderato del sistema con una strategia di Continuous Delivery.},
  file        = {:amslaurea15716 - Prototyping a Scalable Aggregate Computing Cluster with Open Source Solutions.pdf:PDF},
  keywords    = {aggregate programming,cloud computing,reactive platform,kubernetes,continuous delivery},
}

@Thesis{amslaurea14292,
  author      = {Filippo Berlini},
  title       = {Tecniche e algoritmi di aggregate computing a supporto di contesti di smart mobility},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/14292/},
  abstract    = {Il terzo millennio ha portato con s{\'e} importanti innovazioni tecnologiche nell'ambito dell'informatica che hanno causato modifiche sostanziali nel modo di vivere e di pensare delle persone. Al giorno d'oggi non vi {\`e} soggetto che esca di casa senza il proprio smartphone, questo ci porta ad essere sempre muniti di un dispositivo computazionale con un'elevata capacit{\`a} di calcolo. La diffusione di questi device, in aggiunta alla crescita di dispositivi in rete, ha portato allo studio e lo sviluppo di sistemi basati sull'Internet of Things (IoT). Lo studio e lo sviluppo di tali sistemi offrono grandi potenzialit{\`a} che non riescono per{\`o} ad essere pienamente sfruttate a causa di un supporto tecnico non adeguato. 
Un'altra conseguenza dello sviluppo e della diffusione dei device computazionali sono i sistemi di Smart City e gli studi ad essi associati. La Smart City, in tutti i suoi ambiti, {\`e} in fervente crescita e lo sviluppo e il progresso tecnologico le offrono sempre nuove potenzialit{\`a}. Grazie ai finanziamenti delle istituzioni internazionali che supportano questo tipo di ricerca, il processo di evoluzione {\`e} continuo.
La progettazione di un sistema distribuito, come {\`e} di fatto l'IoT, {\`e} per sua natura complessa. Gli approcci utilizzati finora per lo sviluppo di questi sistemi si sono mostrati frequentemente inadeguati o poco efficaci. {\`E} proprio in questo ambito che si inserisce l'Aggregate Programming. Lo studio di questa tesi vuole mostrare infatti come l'Aggregate Programming offra un modo di
interpretare e pensare in termini di sistemi distribuiti capace di sfruttare le potenzialit{\`a} che questi sistemi offrono. Nella presente tesi si pone in particolare attenzione alla Smart Mobility con lo scopo di mostrare possibili soluzioni algoritmiche nell'ambito della gestione del traffico e della viabilit{\`a} utilizzando l'Aggregate Programming.},
  file        = {:amslaurea14292 - Tecniche E Algoritmi Di Aggregate Computing a Supporto Di Contesti Di Smart Mobility.pdf:PDF},
  keywords    = {Aggregate Programming,Distributed Systems,Anticipative Vehicle Routing,Smart Mobility,Internet of Things},
}

@Thesis{amslaurea12948,
  author      = {Thomas Farneti},
  title       = {Design and Deployment of an Execution Platform based on Microservices for Aggregate Computing in the Cloud},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/12948/},
  abstract    = {Il termine Internet of Things viene spesso utilizzato per definire oggetti intelligenti, servizi, and applicazioni connessi attraverso Internet. Uno studio redatto da Cisco afferma che la crescita del numero e della variet{\`a} di devices da cui collezionare dati {\`e} estremamente rapida. Aumentando il numero di devices aumenta conseguentemente anche la complessit{\`a}, quindi, ci si trova ad affrontare problemi tra i quali: mancanza di modularit{\`a} e riusabilit{\`a}, difficolt{\`a} nelle fasi di test, manutenzione e rilascio.

La Programmazione Aggregata fornisce un'alternativa ai metodi di sviluppo software tradizionali, che semplifica drammaticamente progettazione, creazione, e manutenzione di sistemi IoT complessi. Con questa tecnica, l'unit{\`a} base di computazione non {\`e} pi{\`u} un singolo device ma una collezione cooperativa di devices.

Questa tesi descrive la progettazione e sviluppo di una Piattaforma per Programmazione Aggregata basata su microservizi nel Cloud.

A differenza del modello distribuito della Programmazione Aggregata, il Cloud Computing rappresenta un'ulteriore opportunit{\`a} per la costruzione di sistemi scalabili e pu{\`o} essere pensato come una strategia alternativa di esecuzione dove le computazioni sono per l'appunto eseguite su Cloud.

Per poter ottenere il massimo dalle tipiche caratteristiche di scalabilit{\`a} ed affidabilit{\`a} fornite dal modello Cloud occorre adottare un'architettura adeguata. Questo lavoro descrive come poter servirsi dell'architettura a microservizi costruendo l'infrastruttura richiesta per la comunicazione tra processi dalle fondamenta.

Data la maggiore complessit{\`a} tecnologica delle architetture a microservizi, l'elaborato descrive come adottare un approccio a "container" alleviando le difficolt{\`a} di gestione attraverso un container orchestrator.},
  file        = {:amslaurea12948 - Design and Deployment of an Execution Platform Based on Microservices for Aggregate Computing in the Cloud.pdf:PDF},
  keywords    = {aggregate programming,microservices,cloud computing,continuous delivery,docker,DDD,event driven},
}

@Thesis{amslaurea17133,
  author      = {Matteo Magnani},
  title       = {Design e implementazione di un sistema di grid computing per il simulatore Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/17133/},
  abstract    = {Alchemist {\`e} un simulatore ad eventi discreti in grado di eseguire simulazioni appartenenti a domini estremamente differenti, come simulazioni chimiche e movimento di pedoni. {\`E} frequente che venga impiegato per eseguire un grande numero di simulazioni contemporanee, che differiscono per pochi parametri di configurazione. Per questo motivo {\`e} stato considerato necessario sviluppare una parte dell'applicativo in grado di utilizzare tecniche di grid computing, in modo da distribuire questa enorme mole di lavoro. Questo documento fa una panoramica sulle attuali tecnologie per il grid computing identificando come tecnologia ideale Apache Ignite. A questo punto descrive nel dettaglio la progettazione e realizzazione vera e propria del sistema.},
  file        = {:amslaurea17133 - Design E Implementazione Di Un Sistema Di Grid Computing Per Il Simulatore Alchemist.pdf:PDF},
  keywords    = {Grid Computing,Grid,Alchemist,Distribuzione,Apache Ignite},
}

@Thesis{amslaurea14329,
  author      = {Andrea Placuzzi},
  title       = {Integrazione dei formati di navigazione GPS standard in Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/14329/},
  abstract    = {Lo scopo di questa tesi {\`e} stata la reingegnerizzazione del modulo di Geographic Information System (GIS) di Alchemist, ovvero quella parte che si occupa di caricare ed utilizzare i dati di tipo geografico, come mappe terrestri e tracce GPS. L?obbiettivo primario di questo lavoro {\`e} stato creare una struttura in grado di garantire la possibilit{\`a} di caricare le tracce GPS in vari formati. A tal scopo si {\`e} prodotto un caricatore di tracce che, applicando il pattern Strategy, delega il caricamento dei vari formati  di tracce e l?allineamento dei tempi ad entit{\`a} esterne al fine di massimizzare l?estendibilit{\`a}. Infine per validare il modello e l?implementazione si sono prodotti dei test automatici.},
  file        = {:amslaurea14329 - Integrazione Dei Formati Di Navigazione GPS Standard in Alchemist.pdf:PDF},
  keywords    = {Alchemist,GPS,Geographic Information System,GPX,Simulazione},
}

@Thesis{amslaurea14019,
  author      = {Giacomo Scaparrotti},
  title       = {Studio delle prestazioni del simulatore Alchemist: ottimizzazione di routing e caching},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/14019/},
  abstract    = {Il simulatore Alchemist {\`e} un simulatore ad eventi discreti (DES) che fa dell'efficienza uno dei suoi punti di forza, grazie anche all'adozione di una versione modificata del Next Reaction Method di Gibson e Bruck e di altre soluzioni incentrate sull'ottenimento di elevate prestazioni. Dopo aver allestito un banco di prova con cui testare il simulatore in differenti situazioni, per{\`o}, {\`e} emerso che alcune soluzioni tecniche adottate, come il ricorso al caching per cercare di ridurre al minimo le elaborazioni computazionalmente pi{\`u} impegnative, non contribuivano in maniera adeguata al mantenimento di un alto livello prestazionale. Si {\`e} perci{\`o} cercato di porre rimedio a questi problemi, introducendo delle nuove soluzioni tecniche e migliorando alcune di quelle preesistenti, misurando e discutendo poi il loro impatto sulle performance di Alchemist.},
  file        = {:amslaurea14019 - Studio Delle Prestazioni Del Simulatore Alchemist_ Ottimizzazione Di Routing E Caching.pdf:PDF},
  keywords    = {simulazione,alchemist,protelis,cache,performance,routing,graphhopper},
}

@Thesis{amslaurea13090,
  author      = {Matteo Francia},
  title       = {A Foundational Library for Aggregate Programming},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/13090/},
  abstract    = {L'elevata diffusione di entit{\`a} computazionali ha contribuito alla costruzione di sistemi distribuiti fortemente eterogenei. L'ingegnerizzazione di sistemi auto-organizzanti, incentrata sull'interazione tra singoli dispositivi, {\`e} intrinsecamente complessa, poich{\'e} i dettagli di basso livello, come la comunicazione e l?efficienza, condizionano il design del sistema. Una pletora di nuovi linguaggi e tecnologie consente di progettare e di coordinare il comportamento collettivo di tali sistemi, astraendone i singoli componenti. In tale gruppo rientra il field calculus, il quale modella i sistemi distribuiti in termini di composizione e manipolazione di field, "mappe" dispositivo-valore variabili nel tempo, attraverso quattro operatori sufficientemente generici e semplici al fine di rendere universale il modello e di consentire la verifica di propriet{\`a} formali, come la stabilizzazione di sistemi auto-organizzanti. L'aggregate programming, ponendo le sue fondamenta nel field calculus, utilizza field computazionali per garantire elasticit{\`a}, scalabilit{\`a} e composizione di servizi distribuiti tramite, ad esempio, il linguaggio Protelis. Questa tesi contribuisce alla creazione di una libreria Protelis per l'aggregate programming, attraverso la creazione di interfacce di programmazione (API) adatte all'ingegnerizzazione di sistemi auto-organizzanti con crescente complessit{\`a}. La libreria raccoglie, all?interno di un unico framework, algoritmi tra loro eterogenei e meta-pattern per la coordinazione di entit{\`a} computazionali. Lo sviluppo della libreria richiede la progettazione di un ambiente minimale di testing e pone nuove sfide nella definizione di unit e regression testing in ambienti auto-organizzanti. L'efficienza e l'espressivit{\`a} del lavoro proposto sono testate e valutate empiricamente attraverso la simulazione di scenari pervasive computing a larga scala.},
  file        = {:amslaurea13090 - A Foundational Library for Aggregate Programming.pdf:PDF},
  keywords    = {Aggregate programming,Programming languages,Self-organisation,Application programming interface,Simulation},
}

@Thesis{amslaurea12920,
  author      = {Giacomo Mantani},
  title       = {Towards security-aware aggregate computing},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/12920/},
  abstract    = {Utilizzare i singoli dispositivi come astrazione di base nei moderni algoritmi
di programmazione pone dei limiti progettuali. La complessit{\`a} nel gestire le
interazioni ed i comportamenti pu{\`o} portare ad errori di progettazione, oltre che
aumentare notevolmente il tempo di sviluppo. L'aggregate computing {\`e} un
paradigma che cerca di risolvere queste problematiche. Mette a disposizione
funzioni basate sul field calculus, per orchestrare dispositivi mobili situati
nello spazio fisico, definiti in letteratura come campi computazionali.

Gli attuali algoritmi di programmazione aggregata non tengono conto della
possibilit{\`a} che alcuni dispositivi possano comportarsi in modo scorretto o
opportunistico. Essendo questi algoritmi spesso utilizzati in sistemi critici {\`e}
essenziale affrontare il problema.

In questa trattazione si andranno a sviluppare soluzioni e proporre idee per
nuovi approcci ibridi che utilizzano i sistemi di trust.},
  file        = {:amslaurea12920 - Towards Security Aware Aggregate Computing.pdf:PDF},
  keywords    = {aggregate programming,field calculus,trust systems,distributed framework,security,self-organization},
}

@Thesis{amslaurea12310,
  author      = {Elisa Casadio},
  title       = {Revisione e refactoring dell'interfaccia utente del simulatore Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/12310/},
  abstract    = {Lo scopo di questa tesi {\`e} la revisione e il refactoring dell'interfaccia grafica del simulatore Alchemist, per offrire una migliore esperienza d'uso all'utente. L'interfaccia grafica permette la configurazione completa di una simulazione ed il suo avvio in modalit{\`a} normale o batch. Per il suo sviluppo, {\`e} stata utilizzata la libreria JavaFX, che ha permesso di separare l'aspetto del programma dalla specifica comportamentale, e supporta l'Hi-DPI, che consente al simulatore di essere scalabile anche su schermi ad alta risoluzione. L'ambiente ottenuto {\`e} intuitivo, perch{\'e} offre un'esperienza d'uso simile ad un IDE di sviluppo; ed {\`e} anche consistente rispetto allo stato del file system. Nel testo sono illustrati tutti i requisiti che il progetto deve soddisfare e, inoltre, sono descritte, in modo approfondito, la progettazione e l'implementazione dell'interfaccia realizzata. Il risultato ottenuto {\`e} un ambiente funzionante, che soddisfa buona parte delle specifiche richieste e che potr{\`a} essere ampliato
in futuro con nuove funzionalit{\`a}.},
  file        = {:amslaurea12310 - Revisione E Refactoring Dell'interfaccia Utente Del Simulatore Alchemist.pdf:PDF},
  keywords    = {Alchemist,Java,JavaFX,interfaccia grafica,simulazione,simulatore},
}

@Thesis{amslaurea12188,
  author      = {Chiara Varini},
  title       = {Sviluppo di un simulatore per la piattaforma Scafi},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/12188/},
  abstract    = {Il lavoro di tesi muove i suoi passi dalle esigenze di poter testare e simulate dei sistemi distribuiti aggregati. Lo scopo dunque e? quello di creare un simulatore per la piattaforma Scafi. 
Una volta definito il codice dell?applicazione distribuita utilizzando le API Scafi, dovr{\`a} essere possibile importare il progetto sul simulatore testarne agilmente il corretto funzionamento. Allo stesso tempo si dovr{\`a} anche ottenere una rappresentazione grafica intuitiva, semplice e pulita, nella quale siano ben distinguibili tutti i diversi elementi che compongono il sistema aggregato.},
  file        = {:amslaurea12188 - Sviluppo Di Un Simulatore Per La Piattaforma Scafi.pdf:PDF},
  keywords    = {Java,Scala,Scafi},
}

@Thesis{amslaurea11967,
  author      = {Franco Pradelli},
  title       = {Sviluppo del simulatore ALCHEMIST per la modellazione di movimento cellulare},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/11967/},
  abstract    = {La tesi ha avuto come obiettivo l?estensione dell?incarnazione biochimica del simulatore Alchemist, cio{\`e} di quella parte del simulatore dedicata alla modellazione di ambienti multicellulari. L'estensione si {\`e} focalizzata sullo sviluppo delle necessarie astrazioni per modellare il movimento cellulare, un fenomeno che riveste una grande importanza in molti eventi di rilevanza biologica e fisiologica. A tal scopo si {\`e} definito, e implementato sulla piattaforma ALCHEMIST, un modello di: 1) giunzione cellulare 2) estensione spaziale della cellula 3) ambiente cellulare 4) interazione meccanica. Sono infatti questi quattro elementi chiave necessari per la riproduzione il pi{\`u} fedele possibile dei fenomeni biologici associati al movimento cellulare. Al fine di validare il modello e l'implementazione si sono infine sviluppati alcuni test, tra cui, nei principali, viene riprodotto il fenomeno della chemiotassi e l'inseguimento neutrofilo-batterio.},
  file        = {:amslaurea11967 - Sviluppo Del Simulatore ALCHEMIST Per La Modellazione Di Movimento Cellulare.pdf:PDF},
  keywords    = {Computational Systems Biology,Multicellular Systems Biology,Alchemist,Movimento cellulare,Modellazione},
}

@Thesis{amslaurea11009,
  author      = {Gabriele Graffieti},
  title       = {Progettazione e implementazione di una incarnazione biochimica per il simulatore Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/11009/},
  abstract    = {Scopo di questo elaborato di tesi e? la modellazione e l?implementazione di
una estensione del simulatore Alchemist, denominata Biochemistry, che permetta di simulare un ambiente multi-cellulare. 
Al fine di simulare il maggior numero possibile di processi biologici, il simulatore dovra? consentire di modellare l?eterogeneita? cellulare attraverso la modellazione di diversi aspetti dei sistemi cellulari, quali: reazioni intracellulari, segnalazione tra cellule adiacenti, giunzioni cellulari e movimento. 
Dovra?, inoltre, essere ammissibile anche
l?esecuzione di azioni impossibili nel mondo reale, come la distruzione o la
creazione dal nulla di molecole chimiche.

In maniera pi{\`u} specifica si sono modellati ed implementati i seguenti processi biochimici: creazione e distruzione di molecole chimiche, reazioni biochimiche intracellulari, scambio di molecole tra cellule adiacenti, creazione e distruzione di giunzioni cellulari.
E? stata dunque posta particolare enfasi nella modellazione delle reazioni tra cellule vicine, il cui meccanismo e? simile a quello usato nella segnalazione cellulare.

Ogni parte del sistema e? stata modellata seguendo fenomeni realmente presenti nei sistemi multi-cellulari, e documentati in letteratura. Per la specifica delle reazioni chimiche, date in ingresso alla simulazione, e? stata necessaria l?implementazione di un Domain Specific Language (DSL) che consente la scrittura di reazioni in modo simile al linguaggio naturale, consentendo l?uso del simulatore anche a persone senza particolari conoscenze di biologia.

La correttezza del progetto e? stata validata tramite test compiuti con dati
presenti in letteratura e inerenti a processi biologici noti e ampiamente studiati.},
  file        = {:amslaurea11009 - Progettazione E Implementazione Di Una Incarnazione Biochimica Per Il Simulatore Alchemist.pdf:PDF},
  keywords    = {Simulazione System Biology simulazione di sistemi multi-cellulari},
}

@Thesis{amslaurea10341,
  author      = {Roberto Casadei},
  title       = {Aggregate Programming in Scala: a Core Library and Actor-Based Platform for Distributed Computational Fields},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/10341/},
  abstract    = {La programmazione aggregata {\`e} un paradigma che supporta la programmazione di sistemi di dispositivi, adattativi ed eventualmente a larga scala, nel loro insieme -- come aggregati. L'approccio prevalente in questo contesto {\`e} basato sul field calculus, un calcolo formale che consente di definire programmi aggregati attraverso la composizione funzionale di campi computazionali, creando i presupposti per la specifica di pattern di auto-organizzazione robusti.

La programmazione aggregata {\`e} attualmente supportata, in modo pi{\`u} o meno parziale e principalmente per la simulazione, da DSL dedicati (cf., Protelis), ma non esistono framework per linguaggi mainstream finalizzati allo sviluppo di applicazioni. Eppure, un simile supporto sarebbe auspicabile per ridurre tempi e sforzi d'adozione e per semplificare l'accesso al paradigma nella costruzione di sistemi reali, nonch{\'e} per favorire la ricerca stessa nel campo.

Il presente lavoro consiste nello sviluppo, a partire da un prototipo della semantica operazionale del field calculus, di un framework per la programmazione aggregata in Scala.

La scelta di Scala come linguaggio host nasce da motivi tecnici e pratici. Scala {\`e} un linguaggio moderno, interoperabile con Java, che ben integra i paradigmi ad oggetti e funzionale, ha un sistema di tipi espressivo, e fornisce funzionalit{\`a} avanzate per lo sviluppo di librerie e DSL. Inoltre, la possibilit{\`a} di appoggiarsi, su Scala, ad un framework ad attori solido come Akka, costituisce un altro fattore trainante, data la necessit{\`a} di colmare l'abstraction gap inerente allo sviluppo di un middleware distribuito.

Nell'elaborato di tesi si presenta un framework che raggiunge il triplice obiettivo: la costruzione di una libreria Scala che realizza la semantica del field calculus in modo corretto e completo, la realizzazione di una piattaforma distribuita Akka-based su cui sviluppare applicazioni, e l'esposizione di un'API generale e flessibile in grado di supportare diversi scenari.},
  file        = {:amslaurea10341 - Aggregate Programming in Scala_ a Core Library and Actor Based Platform for Distributed Computational Fields.pdf:PDF},
  keywords    = {aggregate-programming field-calculus distributed-framework actors self-organization Scala},
}

@Thesis{amslaurea10519,
  author      = {Simone Costanzi},
  title       = {Integrazione di piattaforme d'esecuzione e simulazione in una toolchain Scala per aggregate programming},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2016},
  url         = {http://amslaurea.unibo.it/10519/},
  abstract    = {La tesi {\`e} calata nell'ambito dell'Aggregate Programming e costituita da una prima parte introduttiva su questo ambito, per poi concentrarsi sulla descrizione degli elaborati prodotti e infine qualche nota conclusiva unitamente a qualche possibile sviluppo futuro.
La parte progettuale consiste nell'integrazione del framework Scafi con il simulatore Alchemist e con una piattaforma di creazione e di esecuzione di sistemi in ambito Spatial Computin, con lo scopo di potenziare la toolchain esistente per Aggregate Programming. Inoltre si riporta anche un breve capitolo per l'esecuzione del framework scafi sviluppato in scala sulla piattaforma Android.},
  file        = {:amslaurea10519 - Integrazione Di Piattaforme D'esecuzione E Simulazione in Una Toolchain Scala Per Aggregate Programming.pdf:PDF},
  keywords    = {Aggregate Programming Spatial Computing Scafi Alchemist},
}

@Thesis{amslaurea8618,
  author      = {Marco Alessi},
  title       = {Spatial computing per dispositivi mobile ed embedded},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2015},
  url         = {http://amslaurea.unibo.it/8618/},
  abstract    = {Questa tesi si focalizza sulle possibili tecnologie per realizzare comunicazioni opportunistiche fra dispositivi mobile ed embedded, con l'obiettivo di integrarle nel contesto di sistemi a larga scala situati, e con particolare riferimento al prototipo denominato "Magic Carpet". Vengono considerate in particolare le tecnologie WiFi ad-hoc e Bluetooth Low Energy su Android e Raspberry Pi.},
  file        = {:amslaurea8618 - Spatial Computing Per Dispositivi Mobile Ed Embedded.pdf:PDF},
  keywords    = {spatial computing, android, comunicazioni opportunistiche, raspberry pi, bluetooth low energy, BLE},
}

@Thesis{amslaurea7990,
  author      = {Davide Ensini},
  title       = {Spatial computing per smart devices},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2014},
  url         = {http://amslaurea.unibo.it/7990/},
  abstract    = {Magic Carpet, nato come un middleware orientato a una dimostrazione sullo spatial computing, che inizialmente coinvolgeva solo smart devices ed un tappeto di tag NFC, {\`e}  il punto di partenza per uno studio sulle tecnologie abilitanti in tale campo. 
Il prodotto finale {\`e} una toolchain per lo sviluppo e la distribuzione, su dispositivi connessi, di applicazioni di spatial computing. Essa comprende un interprete per un DSL basato su un core calculus formalizzato, Field Calculus, e un middleware che supporta l'astrazione curando, a basso livello, le comunicazioni con il vicinato e le percezioni ambientali.},
  file        = {:amslaurea7990 - Spatial Computing Per Smart Devices.pdf:PDF},
  keywords    = {NFC, BLE, spatial, computing, field, calculus, protelis, proto, android, middleware, DSL, IOT},
}

@Thesis{amslaurea7349,
  author      = {Andrea Fortibuoni},
  title       = {Sviluppo di una infrastruttura location-based per l'auto-organizzazione di smart-devices.},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2014},
  url         = {http://amslaurea.unibo.it/7349/},
  abstract    = {La tesi consiste nel realizzare una infrastruttura che mantenga il modello tipico dello Spatial Computing e coniughi al meglio le tecnologie location-based come GPS, NFC e BLE, per permettere ai moderni smart-devices Android di cooperare e auto-organizzarsi al fine di compiere un certo task definito a livello applicativo.},
  file        = {:amslaurea7349 - Sviluppo Di Una Infrastruttura Location Based Per L'auto Organizzazione Di Smart Devices..pdf:PDF},
  keywords    = {smart-devices, spatial computing, auto-organizzazione, localizzazione, Android, NFC, GPS, BLE, beacon.},
}

@Thesis{amslaurea6927,
  author      = {Luca Nenni},
  title       = {Simulazioni realistiche di algoritmi di Crowd Steering},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2014},
  url         = {http://amslaurea.unibo.it/6927/},
  abstract    = {La simulazione realistica del movimento di pedoni riveste una notevole importanza nei mondi dell'architettonica e della sicurezza (si pensi ad esempio all'evacuazione di ambienti), nell'industria dell'entertainment e in molti altri ambiti, importanza che {\`e} aumentata negli ultimi anni.
Obiettivo di questo lavoro {\`e} l'analisi di un modello di pedone esistente e l'applicazione ad esso di algoritmi di guida, l'implementazione di un modello pi{\`u} realistico e la realizzazione di simulazioni con particolare attenzione alla scalabilit{\`a}.
Per la simulazione {\`e} stato utilizzato il framework Alchemist, sviluppato all'interno del laboratorio di ricerca APICe, realizzando inoltre alcune estensioni che potranno essere inglobate nel pacchetto di distribuzione del sistema stesso.
I test effettuati sugli algoritmi presi in esame evidenziano un buon guadagno in termini di tempo in ambienti affollati e il nuovo modello di pedone risulta avere un maggiore realismo rispetto a quello gi{\`a} esistente, oltre a superarne alcuni limiti evidenziati durante i test e ad essere facilmente estensibile.},
  file        = {:amslaurea6927 - Simulazioni Realistiche Di Algoritmi Di Crowd Steering.pdf:PDF},
  keywords    = {movimento di pedoni, simulazione, algoritmi di guida},
}

@Thesis{amslaurea5293,
  author      = {Enrico Polverelli},
  title       = {Simulazione di algoritmi di auto-organizzazione basati su gradiente computazionale in Alchemist},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2013},
  url         = {http://amslaurea.unibo.it/5293/},
  file        = {:amslaurea5293 - Simulazione Di Algoritmi Di Auto Organizzazione Basati Su Gradiente Computazionale in Alchemist.pdf:PDF},
  keywords    = {Auto-organizzazione, Simulazione, Algoritmi, Gradiente, Alchemist, Design pattern},
}

@Thesis{amslaurea4088,
  author      = {Francesca Cioffi},
  title       = {Algoritmi radient-based per la modellazione e simulazione di sistemi auto-organizzanti},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2012},
  url         = {http://amslaurea.unibo.it/4088/},
  file        = {:amslaurea4088 - Algoritmi Gradient Based Per La Modellazione E Simulazione Di Sistemi Auto Organizzanti.pdf:PDF},
  keywords    = {Design pattern, Auto-organizzazione, Simulazione, Pervasive Computing},
}

@Thesis{amslaurea4074,
  author      = {Paolo Contessi},
  title       = {Supporting semantic web technologies in the pervasive service ecosystems middleware},
  type        = {Tesi di Laurea Magistrale},
  institution = {Università di Bologna},
  year        = {2012},
  url         = {http://amslaurea.unibo.it/4074/},
  abstract    = {Semantic Web technologies are strategic in order to fulfill the openness requirement of Self-Aware Pervasive Service Ecosystems. In fact they provide agents with the ability to cope with distributed data, using RDF to represent information, ontologies to describe relations between concepts from any domain (e.g. equivalence, specialization/extension, and so on) and reasoners to extract implicit knowledge.
The aim of this thesis is to study these technologies and design an extension of a pervasive service ecosystems middleware capable of exploiting semantic power, and deepening performance implications.},
  file        = {:amslaurea4074 - Supporting Semantic Web Technologies in the Pervasive Service Ecosystems Middleware.pdf:PDF},
  keywords    = {Semantic, Web, Jena, Pellet, Sapere, Space},
}

@Thesis{amslaurea14682,
  author      = {Niccol{\`o} Maltoni},
  title       = {Progettazione object-oriented di un'interfaccia grafica JavaFX per il simulatore Alchemist},
  type        = {Tesi di Laurea},
  institution = {Università di Bologna},
  year        = {2017},
  url         = {http://amslaurea.unibo.it/14682/},
  abstract    = {Lo scopo di questa tesi {\`e} la progettazione e la successiva implementazione di un'interfaccia grafica 2D per il simulatore Alchemist. La nuova interfaccia permette di interagire con la simulazione a tempo di esecuzione e di vedere chiaramente rappresentate informazioni su di essa.
In particolare, {\`e} supportata una struttura modulare di effetti che rende facilmente osservabili determinate entit{\`a} del sistema ed eventuali loro propriet{\`a}: rispetto alla classe di effetti dell'interfaccia classica, la nuova tipologia di effetti non {\`e} pi{\`u} una funzione dal singolo nodo alla rappresentazione grafica, bens{\`i} fa riferimento all'intero ambiente, permettendo di costruire rendering complessi facilmente esportabili tramite file JSON.
Si {\`e} scelto di mantenere un'interfaccia il pi{\`u} possibile user-friendly, mantenendo un design pi{\`u} simile ai simulatori a scopo videoludico per favorire l'utilizzo da parte di utenti inesperti. Lo stile estetico al quale si {\`e} deciso di allinearsi {\`e} il Material Design di Google e la libreria grafica utilizzata per l'implementazione {\`e} stata JavaFX.},
  file        = {:amslaurea14682 - Progettazione Object Oriented Di Un'interfaccia Grafica JavaFX Per Il Simulatore Alchemist.pdf:PDF},
  keywords    = {Progettazione object-oriented,Simulazione,Java,JavaFX,Interfaccia Grafica},
}

@Comment{jabref-meta: databaseType:biblatex;}
